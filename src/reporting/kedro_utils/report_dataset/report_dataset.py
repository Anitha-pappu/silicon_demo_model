# Copyright (c) 2016 - present
# QuantumBlack Visual Analytics Ltd (a McKinsey company).
# All rights reserved.
#
# This software framework contains the confidential and proprietary information
# of QuantumBlack, its affiliates, and its licensors. Your use of these
# materials is governed by the terms of the Agreement between your organisation
# and QuantumBlack, and any unauthorised use is forbidden. Except as otherwise
# stated in the Agreement, this software framework is for your internal use
# only and may only be shared outside your organisation with the prior written
# permission of QuantumBlack.

import os
import typing as tp

from kedro.io.core import Version
from kedro_datasets.pickle import PickleDataset

from reporting.kedro_utils.html_dataset.html_dataset import HtmlReportDataset


class ReportDataset(object):

    """
    ``ReportDataSet``  saves Report instances as pickle objects by default.
        If relevant arguments are passed, the instances are saved in html and/or pdf
        formats as well. The underlying functionality is supported by, and passes
        input arguments through to ``generate_html_report`` method.

    Example using Python API:
    >>> from kedro.io import DataCatalog
    >>> from reporting.kedro_utils import ReportDataset
    >>>
    >>>
    >>> report_structure = {
    ...     "Section1": figure1,
    ...     "Section2": figure2,
    ... }
    >>>
    >>> pickle_args = {"filepath":"path/to/report.pickle"}
    >>> html_args = {"filepath":"path/to/report.html"}
    >>>
    >>> report_dataset = ReportDataSet(pickle_args=pickle_args, html_args=html_args)
    >>> report_dataset.save(report_structure)
     """

    def __init__(
        self,
        pickle_args: tp.Dict[str, tp.Any],
        html_args: tp.Optional[tp.Dict[str, tp.Any]] = None,
        version: tp.Optional[Version] = None,
        credentials: tp.Optional[tp.Dict[str, tp.Any]] = None,
        fs_args: tp.Optional[tp.Dict[str, tp.Any]] = None,
    ) -> None:
        """
        Creates a new instance of ``ReportDataSet`` which extends the
        ``AbstractVersionedDataSet`` class from kedro.

        Args:
            pickle_args: Arguments specific to kedro's ``PickleDataset``

                filepath: Filepath in POSIX format to a pickle file prefixed with
                a protocol like ``s3://``. If the prefix is not provided,
                the ``file`` protocol (local filesystem) will be used.
                The prefix should be any protocol supported by ``fsspec``.
                Note: ``http(s)`` doesn't support versioning.

                load_args (optional): Specify additional arguments to be passed to
                ``pickle.load()``

                save_args (optional): Specify additional arguments to be passed to
                ``pickle.dump()``

            html_args (optional): Set of arguments specific to the HTML dataset

                filepath: Filepath in POSIX format to an HTML file

                save_args (optional): Specify additional arguments to be passed to
                ``generate_html_report``

            version (optional): If specified, should be an instance of
                ``kedro.io.core.Version``. If its ``load`` attribute is
                ``None``, the latest version will be loaded. If its ``save``
                attribute is ``None``, save version will be autogenerated.

            credentials (optional): Credentials required to get access to the underlying
                filesystem. E.g. for ``GCSFileSystem`` it should look
                like ``{"token": None}``

            fs_args (optional): Extra arguments to pass into the underlying filesystem
             class constructor (e.g.``{"project": "my-project"}`` for ``GCSFileSystem``)
        """

        filepath, pickle_save_args, pickle_load_args = _parse_args(
            pickle_args,
            arg_type="Pickle",
        )
        html_filepath, html_save_args, _ = _parse_args(html_args, arg_type="Html")

        self.filepath = filepath
        self.pickle_load_args = pickle_load_args
        self.pickle_save_args = pickle_save_args

        self.html_filepath = html_filepath
        self.html_save_args = html_save_args

        self.version = version

        self._pickle_dataset = PickleDataset(
            filepath=self.filepath,
            save_args=self.pickle_save_args,
            load_args=self.pickle_load_args,
            version=version,
            credentials=credentials,
            fs_args=fs_args,
        )
        if self.html_filepath is not None:
            self._html_dataset = HtmlReportDataset(
                filepath=self.html_filepath,
                save_args=self.html_save_args,
                version=version,
                credentials=credentials,
                fs_args=fs_args,
            )

    def load(self) -> None:
        """
        Load the pickle object of the report structure
        """
        return self._pickle_dataset.load()

    def save(self, data) -> None:
        """
        Save the pickle object of the report structure at the specified filepath.

        If ``html_save_path`` is passed, call the ``generate_html_report`` function,
        which takes in the report dictionary, converts it to a html report and stores
        it at the specified path.
        """
        self._pickle_dataset.save(data)
        if self.html_filepath:
            self._html_dataset.save(data)

    def describe(self) -> tp.Dict[str, tp.Any]:
        """
        Return a dictionary containing values of important parameters of the dataset
        """
        return {
            "pickle_filepath": self.filepath,
            "html_filepath": self.html_filepath,
            "html_save_args": self.html_save_args,
            "pickle_load_args": self.pickle_load_args,
            "pickle_save_args": self.pickle_save_args,
            "version": self.version,
        }

    def release(self) -> None:
        """
        Call the ``release`` function of pickle and html dataset classes and call the
        ``invalidate_cache`` function of current class
        """
        self._pickle_dataset.release()
        if self.html_filepath is not None:
            self._html_dataset.release()

        self.invalidate_cache()

    def invalidate_cache(self) -> None:
        """
        Invalidate underlying filesystem caches
        """
        self._pickle_dataset._invalidate_cache()  # noqa: WPS437
        if self.html_filepath is not None:
            self._html_dataset._invalidate_cache()  # noqa: WPS437

    def exists(self):
        """
        Check if the dataset(s) exists in the specified filepath(s)
        """
        html_exists = os.path.exists(
            self.html_filepath,
        ) if self.html_filepath is not None else True
        pickle_exists = os.path.exists(self.filepath)
        return html_exists and pickle_exists


def _parse_args(
    args,
    arg_type="Pickle",
) -> tp.Tuple[str, tp.Dict[str, tp.Any], tp.Dict[str, tp.Any]]:
    if args is None:
        return None, None, None

    try:
        filepath = args["filepath"]
    except KeyError:
        raise KeyError(f"{arg_type} save path must be provided")
    save_args = args.get("save_args")
    load_args = args.get("load_args")
    return filepath, save_args, load_args
