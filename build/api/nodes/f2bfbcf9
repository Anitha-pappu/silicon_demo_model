{
  "code": "def collect_recs_vs_actual_implementation(\n    cra_recommendations: TJson,\n    cra_states: TJson,\n    cra_runs: TJson,\n    imp_data: pd.DataFrame,\n    tag_meta: MetaDataConfig[TagMetaData],\n    offset: str,\n) -> pd.DataFrame:\n    \"\"\"\n    Generates data to assess implementation status of recommendations.\n    Output data has a row for each recommendation in a run to evaluate. It contains tag\n    initial, recommended and current value.\n\n    Example::\n\n        >>> cra_run = [{\n        ...     \"id\": \"run_id_1\",\n        ...     \"timestamp\": \"2023-01-01 02:00:00\",\n        ...}]\n        >>> cra_recs = [{\n        ...     \"id\": \"id_1\",\n        ...     \"value\": 100,\n        ...     \"tolerance\": 10,\n        ...     \"run_id\": \"run_id_1\",\n        ...     \"tag_id\": \"tag_1_id\",\n        ...     \"target_id\": \"target_id\",\n        ...     \"is_flagged\": False,\n        ...     \"status\": \"Pending\",\n        ...}]\n        >>> cra_state = [{\n        ...     \"id\": \"id_2\",\n        ...     \"value\": 150,\n        ...     \"run_id\": \"run_id_1\",\n        ...     \"tag_id\": \"tag_1_id\",\n        ...}]\n        >>> data = pd.DataFrame(\n        ...     [\n        ...         [pd.Timestamp(\"2023-01-01 02:00:00\"), 110],\n        ...         [pd.Timestamp(\"2023-01-01 03:00:00\"), 120],\n        ...         [pd.Timestamp(\"2023-01-01 04:00:00\"), 130],\n        ...     ],\n        ...     columns=[\"timestamp\", \"tag_1\"]\n        ... )\n        >>> tags_meta = MetaDataConfig(\n        ...     [{\n        ...         \"id\": \"tag_1_id\",\n        ...         \"tag\": \"tag_1\",\n        ...         \"clear_name\": \"Tag 1 Name\",\n        ...         \"unit\": \"Tag 1 Unit\",\n        ...         \"tolerance\": 10,\n        ...     }],\n        ...     schema=TagMetaData,\n        ... )\n        >>> collect_recs_vs_actual_implementation(\n        ...     cra_recs,\n        ...     cra_state,\n        ...     cra_run,\n        ...     data,\n        ...     tags_meta,\n        ...     \"1H\",\n        ... ).loc[0]\n        tag_id                          tag_1_id\n        run_id                          run_id_1\n        recommended_value                    100\n        start_value                          150\n        id                                  id_1\n        run_timestamp        2023-01-01 02:00:00\n        timestamp            2023-01-01 03:00:00\n        current_value                        120\n        Name: 0, dtype: object\n\n    Args:\n        cra_recommendations: Previous inputs to 'recommendations' endpoint of cra_api.\n        cra_states: Previous inputs to 'states' endpoint of cra_api.\n        cra_runs: Previous inputs to 'runs' endpoint of cra_api.\n        imp_data: Input data.\n        tag_meta: Tag metadata.\n        offset: Time period between recommendation timestamp and its tracking in a\n            format compatible with pd.Timedelta. For example, if recommendations are\n            evaluated 3 hours from its creation, this argument should be \"3H\".\n\n    Returns:\n        Dataframe with data ready for implementation status calculations.\n    \"\"\"\n    cra_recs_pd = (\n        pd.DataFrame(cra_recommendations)\n        .rename({\"value\": \"recommended_value\"}, axis=1)\n    )\n    cra_states_pd = (\n        pd.DataFrame(cra_states)\n        .rename({\"value\": \"before_recs_value\"}, axis=1)\n        .drop(\"id\", axis=1)\n    )\n    cra_recs_states_pd = cra_recs_pd.merge(cra_states_pd, on=[\"tag_id\", \"run_id\"])\n    cra_recs_states_pd = cra_recs_states_pd[\n        [\"tag_id\", \"run_id\", \"recommended_value\", \"before_recs_value\", \"id\"]\n    ]\n    cra_runs_pd = (\n        pd.DataFrame(cra_runs)\n        .rename({\"id\": \"run_id\", \"timestamp\": \"run_timestamp\"}, axis=1)\n    )[[\"run_id\", \"run_timestamp\"]]\n    cra_runs_pd[\"run_timestamp\"] = pd.to_datetime(cra_runs_pd[\"run_timestamp\"])\n    cra_data = cra_recs_states_pd.merge(cra_runs_pd, on=\"run_id\")\n    cra_data[\"start_imp_tracking\"] = (\n        cra_data[\"run_timestamp\"] + pd.Timedelta(offset)\n    )\n    cra_data = cra_data.sort_values(\"run_timestamp\")\n\n    imp_data = imp_data.copy()\n    imp_data.columns = (\n        pd.Series(imp_data.columns)\n        .replace({conf.tag: conf.id for conf in tag_meta})\n        .values\n    )\n    imp_data[\"timestamp\"] = pd.to_datetime(imp_data[\"timestamp\"])\n    imp_data_melt = imp_data.melt(\n        id_vars=\"timestamp\",\n        var_name=\"tag_id\",\n        value_name=\"current_value\",\n    )\n\n    recs_vs_actual = cra_data.merge(\n        imp_data_melt,\n        left_on=[\"tag_id\", \"start_imp_tracking\"],\n        right_on=[\"tag_id\", \"timestamp\"],\n    )\n\n    return recs_vs_actual.drop([\"start_imp_tracking\"], axis=1)\n",
  "filepath": "demo_model\\src\\recommend\\implementation_tracker\\_prepare_data.py",
  "parameters": {
    "recommend.imp_tracking.offset": "3H"
  },
  "run_command": null,
  "inputs": [
    "old_cra_recommendations",
    "old_cra_states",
    "old_cra_runs",
    "test_data",
    "tags_meta",
    "params:recommend.imp_tracking.offset"
  ],
  "outputs": [
    "implementation_input"
  ]
}